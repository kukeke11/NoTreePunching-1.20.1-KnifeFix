# Design Proposition: Unified Sharp Tool & Harvest System (Refined)

This document refactors and expands upon the original **Unified Sharp Tool & Harvest System** to align more closely with Forge’s recommended patterns, No Tree Punching’s (NTP) philosophy and TerraFirmaCraft (TFC) inspirations. The goal is to provide a clear specification so that an implementer can write code against Forge 1.20.x with minimal ambiguity.

## 1 High‑Level Goal

Refactor the mod’s harvesting and tool mechanics into a single, cohesive system that is:

- **Data‑Driven & Extensible** – Define all behaviour via tags and data files (loot modifiers) instead of hard‑coded lists. Tags are the primary mechanism for grouping items/blocks in Forge[\[1\]](https://docs.minecraftforge.net/en/latest/resources/server/tags/#:~:text=Declaring%20Your%20Own%20Groupings); they allow other mods or datapacks to extend your definitions without code changes.
- **True to NTP & TFC Philosophy** – Blocks broken with the wrong tool should not drop anything. Following TFC’s rule, players _can_ break plants with their bare hands, but will receive **no drops** unless the correct tool is used[\[2\]](https://1710-wiki.terrafirmacraft.com/Stone-Age_Guide#:~:text=The%20tech,you%20absolutely%20nothing%20in%20return). Hand‑punching logs still yields nothing as in NTP.
- **Compatible by Default** – Leverage vanilla, Forge and common (c:) tags so that plants and tools from other mods are automatically recognised without bespoke integration. Provide hook points for modpack authors to refine behaviour via tags or config.
- **Minimal Overrides** – Use **Global Loot Modifiers** (GLMs) rather than editing individual loot tables or writing invasive event handlers. GLMs can remove or add drops globally and are the recommended, data‑driven solution in modern Forge.
- **Configurable & Emergent** – Avoid per‑block settings. Behaviour should emerge from tag membership and simple configuration (e.g., which tiers have faster harvest speeds), while still allowing pack authors to override via datapacks.

## 2 Core Principles

1. **Tags as the Source of Truth** – An item is considered a _sharp tool_ only if it is in the #notreepunching:sharp_tools tag (which can include common tool tags like #c:tools/knives). A block is a _plant candidate_ if it is in the #notreepunching:plant_candidates tag. Blocks that may still drop items when broken by hand belong to the #notreepunching:hand_harvest_ok tag. This plural naming follows Forge conventions[\[3\]](https://docs.minecraftforge.net/en/latest/resources/server/tags/#:~:text=Conventions).
2. **Use of Community Tags** – Whenever possible, include Forge or c: (common) tags in your own tags via optional references. Forge recommends using the forge or c namespace for groupings that should be shared across mods[\[3\]](https://docs.minecraftforge.net/en/latest/resources/server/tags/#:~:text=Conventions). By adding #forge:plants, #c:plants and tool tags like #forge:tools/knives to your lists, you automatically recognise plants and tools from other mods.
3. **Separation of Plant Categories** – Not all plants should behave the same. Leaves, flowers and saplings still drop items when broken by hand (preserving NTP’s stick collection[\[4\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=,enables%20you%20to%20acquire%20flint)); grasses, vines and similar flora require a sharp tool for drops. Categories are defined via tags rather than hand‑crafted lists.
4. **Global Loot Modifiers over Event Handlers** – Instead of using HarvestDropsEvent (which has been superseded in newer versions) to clear drops, register GLMs to manipulate loot results. GLMs operate after a block’s loot table has been processed and can remove or add drops based on block and tool tags.
5. **Respect Vanilla & Other Mods** – Do not override vanilla loot tables unnecessarily. Use tags and GLMs to augment behaviour only when necessary (e.g., adding plant fibres to grass). Other mods’ loot tables and block behaviours should remain intact unless a sharp tool requirement applies.

## 3 System Component 1: Tool and Plant Tagging

The core of the system is a set of tags that define which items are sharp tools and which blocks are subject to special harvest rules. These tags can be altered or extended via datapacks or configuration.

### 3.1 Sharp Tool Tags (items)

data/notreepunching/tags/items/sharp_tools.json

- Contains all NTP knives by default.
- Also includes optional entries so that community knives, scythes and sickles from other mods are recognised automatically:
- { "id": "#forge:tools/knives", "required": false }
- { "id": "#c:tools/knives", "required": false }
- { "id": "#forge:tools/scythes", "required": false }
- { "id": "#c:tools/scythes", "required": false }
- { "id": "#c:tools/sickles", "required": false }

### 3.2 Shears Tag (items)

data/notreepunching/tags/items/shears.json

- Defines shears for drop bypass. Includes minecraft:shears and optional #forge:shears and #c:tools/shears.

### 3.3 Plant Candidate Tags (blocks)

data/notreepunching/tags/blocks/plant_candidates.json

- Broad list of plants that could be affected by the zero‑drop rule. Includes optional tags #c:plants and #forge:plants (to auto‑include modded plants) and explicitly lists vanilla plants not always covered by those tags, such as minecraft:grass, minecraft:fern, minecraft:sugar_cane, minecraft:seagrass, minecraft:bamboo, minecraft:vines, minecraft:cobweb, minecraft:nether_wart, minecraft:kelp, minecraft:moss_carpet, minecraft:cave_vines, etc.

### 3.4 Hand‑Harvest‑Ok Tags (blocks)

data/notreepunching/tags/blocks/hand_harvest_ok.json

- Whitelist of plants that _should drop_ when broken by hand, e.g. #minecraft:leaves, #minecraft:flowers, #minecraft:small_flowers, #minecraft:tall_flowers, and #minecraft:saplings. These preserve the vanilla stick and sapling drops[\[4\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=,enables%20you%20to%20acquire%20flint).

### 3.5 Fibre Source Tags (blocks)

data/notreepunching/tags/blocks/fiber_sources.json

- Identifies blocks that drop plant fibres when harvested with a sharp tool. By default, this is minecraft:grass and minecraft:tall_grass. Pack authors can add more grasses or modded plants here.

### 3.6 SharpToolManager Utility

A static utility class centralises tag checks and speed logic:

- boolean isSharp(ItemStack stack) → stack.is(ModTags.Items.SHARP_TOOLS)
- boolean isShears(ItemStack stack) → stack.is(ModTags.Items.SHEARS)
- boolean isPlantCandidate(BlockState state) → state.is(ModTags.Blocks.PLANT_CANDIDATES)
- boolean isHandHarvestOk(BlockState state) → state.is(ModTags.Blocks.HAND_HARVEST_OK)
- float getPlantDestroySpeed(ItemStack tool, BlockState state) → returns a speed multiplier when using a sharp tool on a plant candidate, scaling with the tool tier. For example, return baseSpeed \* tierMultiplier.

Knives and scythes should override getDestroySpeed to delegate to this helper, and leave drop correctness to the GLMs.

## 4 System Component 2: Harvest Behaviour via Global Loot Modifiers

Instead of modifying every loot table or using HarvestDropsEvent, we implement two GLMs. Each GLM is a small, serialisable class that inspects the block and tool at drop time.

### 4.1 NoHandDropsWhenPlantAndNotSharp (GLM)

This GLM enforces the TFC rule: **hands can break plant blocks, but drops are cleared unless a sharp tool is used**.

**Behaviour:** - Triggered on every block drop. - If the block state is tagged plant_candidates **and not** hand_harvest_ok, then: - If the tool is tagged shears or has the Silk Touch enchantment, _do nothing_ – leaves and vines are properly harvested by shears or Silk Touch. - If the player is in Creative or a fake player (configurable), _do nothing_. - If the tool _is not_ tagged sharp_tools, clear the generated loot; the block breaks but yields nothing. This covers hand breaking and wrong tools. - **Rationale:** In TFC, punching wood or plants yields no items[\[2\]](https://1710-wiki.terrafirmacraft.com/Stone-Age_Guide#:~:text=The%20tech,you%20absolutely%20nothing%20in%20return); NTP follows the same principle for logs. Using tags lets the rule emerge naturally.

### 4.2 AddFiberOnSharp (GLM)

This GLM adds plant fibre drops when appropriate.

**Behaviour:** - Triggered on block drop for blocks tagged fiber_sources. - If the tool used is tagged sharp_tools, add notreepunching:plant_fiber to the loot. Optionally scale with Fortune or a configurable chance. - If the tool is not sharp, rely on NoHandDropsWhenPlantAndNotSharp to clear drops (i.e., no plant fibres). - This GLM replaces the need to override the loot tables for grass or tall grass.

Both GLMs can be registered via a GlobalLootModifierProvider in data generation.

## 5 Example Scenarios

| Scenario | Action | Result |
| --- | --- | --- |
| Player breaks **grass** with **hand** | Block is plant_candidate, not hand_harvest_ok; tool is not sharp → NoHandDrops clears loot. | No drops. |
| Player breaks **grass** with **flint knife** | Block matches plant_candidate; tool is sharp → NoHandDrops does nothing; AddFiberOnSharp adds fibre. | Drops 1× Plant Fibre. |
| Player breaks **tall fern** with **stone sword** | Block matches plant_candidate; tool is not sharp; not in whitelist; NoHandDrops clears drops. | No drops. |
| Player breaks **oak leaves** with **hand** | Block matches hand_harvest_ok; GLM does nothing (vanilla loot proceeds). | Sticks and saplings may drop[\[4\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=,enables%20you%20to%20acquire%20flint). |
| Player breaks **cobweb** with **hand** | Block is plant_candidate, not hand_harvest_ok; hand isn’t sharp → GLM clears loot. | Web breaks with no string drop (correct: cobweb drops nothing without shears/silk). |
| Player breaks **sugar cane** with **flint knife** | Block is plant candidate; tool is sharp → default sugar cane loot is kept. | Sugar Cane drops. |
| Player breaks **modded flower** (tagged c:plants) with **hand** | Block is plant_candidate via c:plants; flowers are also in hand_harvest_ok → not cleared. | Drops according to mod’s loot table. |
| Player breaks **vines** with **shears** | Block matches plant candidate but tool is shears → NoHandDrops bypassed. | Vines drop as item (vanilla behaviour). |
| Player breaks **grass** with **Silk Touch hoe** | Silk Touch bypasses zero‑drop rule; AddFiberOnSharp is not triggered because hoe isn’t sharp. | Grass block drops (if allowed), no fibre. |
| Player breaks **grass** while in **Creative** | Config may skip creative; NoHandDrops does nothing if skipCreative = true. | Loot unaffected (but creative normally yields no drops). |

## 6 Implementation Plan

1. **Define Tags:** Create JSONs for sharp_tools, shears, plant_candidates, hand_harvest_ok and fiber_sources under data/notreepunching/tags. Use optional references to community tags and explicitly list any vanilla plants missed by those tags.
2. **Implement SharpToolManager:** Static utility for tag checks and harvesting speed; used by Knife/Scythe item classes. Provide a configurable map of tier multipliers for harvest speed.
3. **Refactor Knife & Scythe Items:** Remove bespoke logic from KnifeItem/ScytheItem and delegate speed to SharpToolManager. isCorrectToolForDrops remains unchanged; drop control is handled by GLMs.
4. **Implement GLMs:**
5. NoHandDropsWhenPlantAndNotSharp – serialise tags for candidate/hand‑ok, sharp tools and shears; check Silk Touch and configuration toggles; clear drops when conditions match.
6. AddFiberOnSharp – serialise tags for fibre sources and sharp tools; append fibre on match; optionally scale with Fortune.
7. **Register GLMs:** Use a GlobalLootModifierProvider in data generation to register serializers and default GLM JSONs.
8. **Add Configuration:** Provide a server‑side config with options such as tierMultipliers, skipCreative, skipFakePlayers, fiberChance and lists of additional tags to include/exclude.
9. **Data Generation:** Create providers for tags and GLMs so runData generates the JSON automatically. This ensures the data files stay in sync with the code.
10. **Testing:** Verify that vanilla behaviours (e.g., stick drops from leaves, shearing vines) remain intact. Test with modded plants and tools to ensure auto‑recognition. Check that plant fibre drops require sharp tools and that harvest speeds scale correctly with tool tier.

## 7 Rationale and Compatibility

- **Tag‑Driven Approach:** Using tags for plants and tools aligns with Forge’s recommendation to group items via tags[\[1\]](https://docs.minecraftforge.net/en/latest/resources/server/tags/#:~:text=Declaring%20Your%20Own%20Groupings) and to use existing vanilla/Forge tags whenever possible[\[3\]](https://docs.minecraftforge.net/en/latest/resources/server/tags/#:~:text=Conventions). Tags can include optional values to avoid load errors[\[1\]](https://docs.minecraftforge.net/en/latest/resources/server/tags/#:~:text=Declaring%20Your%20Own%20Groupings), ensuring compatibility across different mod combinations.
- **TFC Inspiration:** In TFC, punching trees and plants yields nothing; players must craft stone tools and knives to harvest straw[\[2\]](https://1710-wiki.terrafirmacraft.com/Stone-Age_Guide#:~:text=The%20tech,you%20absolutely%20nothing%20in%20return)[\[5\]](https://1710-wiki.terrafirmacraft.com/Stone-Age_Guide#:~:text=Straw%20%20can%20be%20obtained,a%20byproduct%20when%20refining%20grains). NTP adopted this “no drop without tool” mechanic[\[6\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=This%20is%20a%20Minecraft%20mod,refocused%20around%20the%20titular%20idea). The refined design retains that feel but allows players to break blocks with their hands (for building) while still enforcing zero drops.
- **Preserving NTP Mechanics:** NTP relies on players collecting sticks from leaves[\[4\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=,enables%20you%20to%20acquire%20flint). By whitelisting leaves and flowers, we avoid breaking this progression. Plant fibre remains a resource gated behind knives and scythes, matching NTP’s early game where a flint knife unlocks plant fibre and string[\[7\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=,fibers%20and%20craft%20plant%20string).
- **Modern Forge Practices:** GLMs are a forward‑compatible way to edit loot; they avoid the issues of deprecated events and scale across all blocks. By limiting the number of loot modifiers to two simple classes, we keep the system maintainable. Tags and GLMs can be extended via datapacks without recompiling the mod.
- **Cross‑Mod Compatibility:** Including #c: and #forge: tags ensures that knives and plants from other mods behave as expected. Modpack makers can fine‑tune behaviour by adding or removing entries via datapacks or config, without needing to edit code.

This refined design document integrates the original proposal with the research‑based propositions, providing a comprehensive blueprint for implementing the unified system. It honours TFC and NTP design philosophies while embracing modern Forge best practices.

[\[1\]](https://docs.minecraftforge.net/en/latest/resources/server/tags/#:~:text=Declaring%20Your%20Own%20Groupings) [\[3\]](https://docs.minecraftforge.net/en/latest/resources/server/tags/#:~:text=Conventions) Tags - Forge Documentation

<https://docs.minecraftforge.net/en/latest/resources/server/tags/>

[\[2\]](https://1710-wiki.terrafirmacraft.com/Stone-Age_Guide#:~:text=The%20tech,you%20absolutely%20nothing%20in%20return) [\[5\]](https://1710-wiki.terrafirmacraft.com/Stone-Age_Guide#:~:text=Straw%20%20can%20be%20obtained,a%20byproduct%20when%20refining%20grains) Stone-Age Guide - TerraFirmaCraft Wiki

<https://1710-wiki.terrafirmacraft.com/Stone-Age_Guide>

[\[4\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=,enables%20you%20to%20acquire%20flint) [\[6\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=This%20is%20a%20Minecraft%20mod,refocused%20around%20the%20titular%20idea) [\[7\]](https://github.com/alcatrazEscapee/no-tree-punching#:~:text=,fibers%20and%20craft%20plant%20string) GitHub - alcatrazEscapee/no-tree-punching: A Minecraft mod which adds a bit of realism to the early game.

<https://github.com/alcatrazEscapee/no-tree-punching>